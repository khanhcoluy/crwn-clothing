{"ast":null,"code":"var _jsxFileName = \"D:\\\\Training React\\\\crwn-clothing\\\\src\\\\component\\\\sign-in\\\\sign-in.component.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport CustomButton from '../custom-button/custom-button.component';\nimport FormInput from '../form-input/form-input.component';\nimport { googleSignInStart, emailSignInStart } from '../../redux/user/user.actions';\nimport { SignInContainer, SignInTitle, ButtonsBarContainer } from './sign-in.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SignIn = (emailSignInStart, googleSignInStart) => {\n  _s();\n\n  const [userCredentials, setCredentials] = useState({\n    email: '',\n    password: ''\n  });\n\n  const handleChange = event => {\n    const {\n      value,\n      name\n    } = event.target;\n    setCredentials({\n      [name]: value\n    });\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      email,\n      password\n    } = userCredentials;\n    emailSignInStart(email, password);\n  };\n\n  return /*#__PURE__*/_jsxDEV(SignInContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SignInTitle, {\n      children: \"I already have an account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Sign in with your email and password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"email\",\n        type: \"email\",\n        handleChange: handleChange,\n        value: email,\n        label: \"email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n        name: \"password\",\n        type: \"password\",\n        value: password,\n        handleChange: this.handleChange,\n        label: \"password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ButtonsBarContainer, {\n        children: [/*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"submit\",\n          children: \" Sign in \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(CustomButton, {\n          type: \"button\",\n          onClick: googleSignInStart,\n          isGoogleSignIn: true,\n          children: \"Sign in with Google\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 3\n  }, this);\n};\n\n_s(SignIn, \"DD6aGRVgB9ERtRO2n52MAcOCRpI=\");\n\n_c = SignIn;\n\nconst mapDispatchToProps = dispatch => ({\n  googleSignInStart: () => dispatch(googleSignInStart()),\n  emailSignInStart: (email, password) => dispatch(emailSignInStart({\n    email,\n    password\n  }))\n});\n\nexport default connect(null, mapDispatchToProps)(SignIn);\n\nvar _c;\n\n$RefreshReg$(_c, \"SignIn\");","map":{"version":3,"sources":["D:/Training React/crwn-clothing/src/component/sign-in/sign-in.component.jsx"],"names":["React","useState","connect","CustomButton","FormInput","googleSignInStart","emailSignInStart","SignInContainer","SignInTitle","ButtonsBarContainer","SignIn","userCredentials","setCredentials","email","password","handleChange","event","value","name","target","handleSubmit","preventDefault","mapDispatchToProps","dispatch"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,YAAP,MAAyB,0CAAzB;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AAEA,SACCC,iBADD,EAECC,gBAFD,QAGO,+BAHP;AAKA,SACCC,eADD,EAECC,WAFD,EAGCC,mBAHD,QAIO,kBAJP;;;AAMA,MAAMC,MAAM,GAAG,CAACJ,gBAAD,EAAmBD,iBAAnB,KAAyC;AAAA;;AACvD,QAAM,CAACM,eAAD,EAAkBC,cAAlB,IAAoCX,QAAQ,CAAC;AAClDY,IAAAA,KAAK,EAAE,EAD2C;AAElDC,IAAAA,QAAQ,EAAE;AAFwC,GAAD,CAAlD;;AAKA,QAAMC,YAAY,GAAIC,KAAD,IAAW;AAC/B,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBF,KAAK,CAACG,MAA9B;AACAP,IAAAA,cAAc,CAAC;AAAE,OAACM,IAAD,GAAQD;AAAV,KAAD,CAAd;AACA,GAHD;;AAKA,QAAMG,YAAY,GAAG,MAAOJ,KAAP,IAAiB;AACrCA,IAAAA,KAAK,CAACK,cAAN;AACA,UAAM;AAAER,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBH,eAA5B;AACAL,IAAAA,gBAAgB,CAACO,KAAD,EAAQC,QAAR,CAAhB;AACA,GAJD;;AAMA,sBACC,QAAC,eAAD;AAAA,4BACC,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFD,eAIC;AAAM,MAAA,QAAQ,EAAEM,YAAhB;AAAA,8BACC,QAAC,SAAD;AACC,QAAA,IAAI,EAAC,OADN;AAEC,QAAA,IAAI,EAAC,OAFN;AAGC,QAAA,YAAY,EAAEL,YAHf;AAIC,QAAA,KAAK,EAAEF,KAJR;AAKC,QAAA,KAAK,EAAC,OALP;AAMC,QAAA,QAAQ;AANT;AAAA;AAAA;AAAA;AAAA,cADD,eASC,QAAC,SAAD;AACC,QAAA,IAAI,EAAC,UADN;AAEC,QAAA,IAAI,EAAC,UAFN;AAGC,QAAA,KAAK,EAAEC,QAHR;AAIC,QAAA,YAAY,EAAE,KAAKC,YAJpB;AAKC,QAAA,KAAK,EAAC,UALP;AAMC,QAAA,QAAQ;AANT;AAAA;AAAA;AAAA;AAAA,cATD,eAiBC,QAAC,mBAAD;AAAA,gCACC,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,eAEC,QAAC,YAAD;AACC,UAAA,IAAI,EAAC,QADN;AAEC,UAAA,OAAO,EAAEV,iBAFV;AAGC,UAAA,cAAc,MAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFD;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBD;AAAA;AAAA;AAAA;AAAA;AAAA,YAJD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmCA,CApDD;;GAAMK,M;;KAAAA,M;;AAsDN,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACzClB,EAAAA,iBAAiB,EAAE,MAAMkB,QAAQ,CAAClB,iBAAiB,EAAlB,CADQ;AAEzCC,EAAAA,gBAAgB,EAAE,CAACO,KAAD,EAAQC,QAAR,KACjBS,QAAQ,CAACjB,gBAAgB,CAAC;AAAEO,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAD,CAAjB;AAHgC,CAAf,CAA3B;;AAMA,eAAeZ,OAAO,CAAC,IAAD,EAAOoB,kBAAP,CAAP,CAAkCZ,MAAlC,CAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CustomButton from '../custom-button/custom-button.component';\r\nimport FormInput from '../form-input/form-input.component';\r\n\r\nimport {\r\n\tgoogleSignInStart,\r\n\temailSignInStart\r\n} from '../../redux/user/user.actions';\r\n\r\nimport {\r\n\tSignInContainer,\r\n\tSignInTitle,\r\n\tButtonsBarContainer\r\n} from './sign-in.styles';\r\n\r\nconst SignIn = (emailSignInStart, googleSignInStart) => {\r\n\tconst [userCredentials, setCredentials] = useState({\r\n\t\temail: '',\r\n\t\tpassword: ''\r\n\t});\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tconst { value, name } = event.target;\r\n\t\tsetCredentials({ [name]: value });\r\n\t};\r\n\r\n\tconst handleSubmit = async (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst { email, password } = userCredentials;\r\n\t\temailSignInStart(email, password);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<SignInContainer>\r\n\t\t\t<SignInTitle>I already have an account</SignInTitle>\r\n\t\t\t<span>Sign in with your email and password</span>\r\n\r\n\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\tname=\"email\"\r\n\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\thandleChange={handleChange}\r\n\t\t\t\t\tvalue={email}\r\n\t\t\t\t\tlabel=\"email\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<FormInput\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={password}\r\n\t\t\t\t\thandleChange={this.handleChange}\r\n\t\t\t\t\tlabel=\"password\"\r\n\t\t\t\t\trequired\r\n\t\t\t\t/>\r\n\t\t\t\t<ButtonsBarContainer>\r\n\t\t\t\t\t<CustomButton type=\"submit\"> Sign in </CustomButton>\r\n\t\t\t\t\t<CustomButton\r\n\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\tonClick={googleSignInStart}\r\n\t\t\t\t\t\tisGoogleSignIn\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSign in with Google\r\n\t\t\t\t\t</CustomButton>\r\n\t\t\t\t</ButtonsBarContainer>\r\n\t\t\t</form>\r\n\t\t</SignInContainer>\r\n\t);\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n\tgoogleSignInStart: () => dispatch(googleSignInStart()),\r\n\temailSignInStart: (email, password) =>\r\n\t\tdispatch(emailSignInStart({ email, password }))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(SignIn);\r\n"]},"metadata":{},"sourceType":"module"}