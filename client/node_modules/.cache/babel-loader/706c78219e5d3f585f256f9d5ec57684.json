{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/analytics';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst config = {\n  apiKey: \"AIzaSyCzZFLM2RC21fEzt52G6ayVMjMKKjScso4\",\n  authDomain: \"crwn-clothing-db-a1822.firebaseapp.com\",\n  projectId: \"crwn-clothing-db-a1822\",\n  storageBucket: \"crwn-clothing-db-a1822.appspot.com\",\n  messagingSenderId: \"403298708837\",\n  appId: \"1:403298708837:web:96abbb1254998436a8458c\",\n  measurementId: \"G-1Z0T10QBZV\"\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // const provider = new firebase.auth.GoogleAuthProvider();\n// provider.setCustomParameters({ prompt: 'select_account' });\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nvar provider = new firebase.auth.GoogleAuthProvider();\nprovider.addScope('profile');\nprovider.addScope('email');\nexport const signInWithGoogle = firebase.auth().signInWithPopup(provider).then(result => {\n  /** @type {firebase.auth.OAuthCredential} */\n  var credential = result.credential; // This gives you a Google Access Token. You can use it to access the Google API.\n\n  var token = credential.accessToken; // The signed-in user info.\n\n  var user = result.user; // ...\n}).catch(error => {\n  // Handle Errors here.\n  var errorCode = error.code;\n  var errorMessage = error.message; // The email of the user's account used.\n\n  var email = error.email; // The firebase.auth.AuthCredential type that was used.\n\n  var credential = error.credential; // ...\n});\nexport default firebase;","map":{"version":3,"sources":["D:/Training React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","addScope","signInWithGoogle","signInWithPopup","then","result","credential","token","accessToken","user","catch","error","errorCode","code","errorMessage","message","email"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,wCAFD;AAGXC,EAAAA,SAAS,EAAE,wBAHA;AAIXC,EAAAA,aAAa,EAAE,oCAJJ;AAKXC,EAAAA,iBAAiB,EAAE,cALR;AAMXC,EAAAA,KAAK,EAAE,2CANI;AAOXC,EAAAA,aAAa,EAAE;AAPJ,CAAf;AAUAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB;AAEA,OAAO,MAAMS,IAAI,GAAGV,QAAQ,CAACU,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB,C,CAEP;AACA;AACA;;AAEA,IAAIC,QAAQ,GAAG,IAAIZ,QAAQ,CAACU,IAAT,CAAcG,kBAAlB,EAAf;AACAD,QAAQ,CAACE,QAAT,CAAkB,SAAlB;AACAF,QAAQ,CAACE,QAAT,CAAkB,OAAlB;AACA,OAAO,MAAMC,gBAAgB,GAAGf,QAAQ,CAACU,IAAT,GAC/BM,eAD+B,CACfJ,QADe,EAE/BK,IAF+B,CAEzBC,MAAD,IAAY;AAChB;AACA,MAAIC,UAAU,GAAGD,MAAM,CAACC,UAAxB,CAFgB,CAIhB;;AACA,MAAIC,KAAK,GAAGD,UAAU,CAACE,WAAvB,CALgB,CAMhB;;AACA,MAAIC,IAAI,GAAGJ,MAAM,CAACI,IAAlB,CAPgB,CAQhB;AACD,CAX+B,EAW7BC,KAX6B,CAWtBC,KAAD,IAAW;AAClB;AACA,MAAIC,SAAS,GAAGD,KAAK,CAACE,IAAtB;AACA,MAAIC,YAAY,GAAGH,KAAK,CAACI,OAAzB,CAHkB,CAIlB;;AACA,MAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB,CALkB,CAMlB;;AACA,MAAIV,UAAU,GAAGK,KAAK,CAACL,UAAvB,CAPkB,CAQlB;AACD,CApB+B,CAAzB;AAsBP,eAAenB,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/analytics';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyCzZFLM2RC21fEzt52G6ayVMjMKKjScso4\",\r\n    authDomain: \"crwn-clothing-db-a1822.firebaseapp.com\",\r\n    projectId: \"crwn-clothing-db-a1822\",\r\n    storageBucket: \"crwn-clothing-db-a1822.appspot.com\",\r\n    messagingSenderId: \"403298708837\",\r\n    appId: \"1:403298708837:web:96abbb1254998436a8458c\",\r\n    measurementId: \"G-1Z0T10QBZV\"\r\n}\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// const provider = new firebase.auth.GoogleAuthProvider();\r\n// provider.setCustomParameters({ prompt: 'select_account' });\r\n// export const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nvar provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.addScope('profile');\r\nprovider.addScope('email');\r\nexport const signInWithGoogle = firebase.auth()\r\n.signInWithPopup(provider)\r\n.then((result) => {\r\n  /** @type {firebase.auth.OAuthCredential} */\r\n  var credential = result.credential;\r\n\r\n  // This gives you a Google Access Token. You can use it to access the Google API.\r\n  var token = credential.accessToken;\r\n  // The signed-in user info.\r\n  var user = result.user;\r\n  // ...\r\n}).catch((error) => {\r\n  // Handle Errors here.\r\n  var errorCode = error.code;\r\n  var errorMessage = error.message;\r\n  // The email of the user's account used.\r\n  var email = error.email;\r\n  // The firebase.auth.AuthCredential type that was used.\r\n  var credential = error.credential;\r\n  // ...\r\n});\r\n\r\nexport default firebase; "]},"metadata":{},"sourceType":"module"}